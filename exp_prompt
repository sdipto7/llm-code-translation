
# Use consistent variable names, explicit initialization, and describe input/output handling in detail, including cases with multiple values on a single line.
# Ensure each step in the algorithm is precise so that it can be implemented without ambiguity in any programming language.


{algorithm}
# Using the above algorithm, generate complete {target_lang} code.
# Ensure the code is self-contained, syntactically correct, and consistent with the variable names and structures in the algorithm.
# Preserve the exact input/output format and data flow described in the algorithm, including proper handling of multiple values per line and correct ordering of outputs.
# Avoid using variable names that shadow built-in functions or types in the target language.
# Before finalizing, verify that the code can run as-is without syntax errors and that it produces outputs exactly as described in the algorithm.
# Provide only the {target_lang} code, without comments, headers, explanations, or examples.







def get_algorithm_from_source_code_prompt(source_code_as_str, source_lang, target_lang):
    prompt = textwrap.dedent(f"""
        {source_lang} code:
        {source_code_as_str}

        Extract a detailed algorithm from this code for translation to {target_lang}:
        - function signatures with parameter and return types (consider {target_lang} equivalents)
        - variable declarations and data types (note {target_lang} compatible types)
        - complete logic flow in execution order
        - all control structures (loops, conditionals) with exact conditions
        - input/output operations and data processing logic (specify format for {target_lang})
        - required libraries, modules, or dependencies (mention {target_lang} equivalents)
        
        Structure the algorithm to facilitate accurate {target_lang} code generation.
        # Provide only the algorithm without any headers, comments, explanations, or examples.
    """).strip()

    return prompt