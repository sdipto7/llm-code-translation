import java.io.OutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.PrintWriter ; import java.util.Vector ; import java.util.StringTokenizer ; import java.io.IOException ; import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.util.Stack ; import java.io.InputStream ; public class atcoder_ABC120_C { public static void main ( String [ ] args ) { InputStream inputStream = System.in ; OutputStream outputStream = System.out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver.solve ( 1 , in , out ) ; out.close ( ) ; } static class TaskB { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String x = in.next ( ) ; Stack < Character > s = new Stack < > ( ) ; int c = 0 ; for ( int i = 0 ; i < x.length ( ) ; i ++ ) { s.push ( x.charAt ( i ) ) ; while ( s.size ( ) > 1 ) { Character p = s.pop ( ) ; Character q = s.pop ( ) ; if ( ( p == '1' && q == '0' ) || ( p == '0' && q == '1' ) ) { c ++ ; continue ; } else { s.push ( q ) ; s.push ( p ) ; break ; } } } out.println ( c * 2 ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer.hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader.readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer.nextToken ( ) ; } } }
