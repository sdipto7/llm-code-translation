import java.util.Iterator ; import java.util.LinkedList ; import java.util.Scanner ; public class codeforces_216_B { int count ; boolean [ ] seen ; int path = 0 , cycle = 1 ; LinkedList < LinkedList < Integer >> graph ; public int dfs ( int child , int par ) { if ( seen [ child ] == true ) return cycle ; seen [ child ] = true ; for ( Integer i : graph.get ( child ) ) { if ( i != par ) { this.count ++ ; if ( dfs ( i , child ) == cycle ) return cycle ; } } return path ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int m = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; codeforces_216_B ft = new codeforces_216_B ( ) ; ft.graph = new LinkedList < > ( ) ; for ( int i = 0 ; i <= m ; i ++ ) { ft.graph.add ( new LinkedList < Integer > ( ) ) ; } ft.seen = new boolean [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; ft.graph.get ( x ).add ( y ) ; ft.graph.get ( y ).add ( x ) ; } int toremove = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( ! ft.seen [ i ] ) { ft.count = 0 ; if ( ft.dfs ( i , 0 ) == ft.cycle ) { if ( ft.count % 2 == 1 ) toremove ++ ; } } } if ( ( m - toremove ) % 2 == 1 ) toremove ++ ; System.out.println ( toremove ) ; } }
