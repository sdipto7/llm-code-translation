import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.io.OutputStream ; import java.io.PrintWriter ; import java.util.StringTokenizer ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { InputStream inputStream = System.in ; OutputStream outputStream = System.out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solution sol = new Solution ( ) ; sol.solve ( in , out ) ; out.close ( ) ; } private static class Solution { private void solve ( InputReader in , PrintWriter out ) { int n = in.nextInt ( ) , k = in.nextInt ( ) ; int [ ] logsLength = in.readArray ( n ) ; int min = 1 , max = ( int ) 1e9 + 1000 ; while ( min < max ) { int mid = ( min + max ) / 2 ; if ( nei ( mid , logsLength , k ) ) max = mid ; else min = mid + 1 ; } out.println ( min ) ; } private boolean nei ( int mid , int [ ] logsLength , int k ) { for ( int log : logsLength ) k -= ( log + mid - 1 ) / mid - 1 ; return k >= 0 ; } } private static class InputReader { private BufferedReader reader ; private StringTokenizer tokenizer ; private InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } private String next ( ) { while ( tokenizer == null || ! tokenizer.hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader.readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer.nextToken ( ) ; } private int nextInt ( ) { return Integer.parseInt ( next ( ) ) ; } private int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) a [ i ] = nextInt ( ) ; return a ; } } }
