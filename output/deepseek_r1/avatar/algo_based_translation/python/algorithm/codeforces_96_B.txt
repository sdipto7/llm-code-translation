**Structured Algorithm Specification**

**Function/Method Signatures:**
- `gen(number: integer, four: integer, seven: integer) -> void`
- `main() -> void`

**Variable Declarations:**
- Global:
  - `l: List<integer>` (initially empty)
  - `limit: integer = 10,000,000,000`
- Within `main`:
  - `n: integer`
  - `ans: integer` (initially 0)

**Algorithmic Flow:**

**1. gen Function:**
1.1. If `number > limit`, terminate recursion.  
1.2. If `number > 0` AND `four == seven`:  
 1.2.1. Append `number` to list `l`.  
1.3. Recursive Call:  
 1.3.1. Compute next_num_4 = `number * 10 + 4`  
 1.3.2. Call `gen(next_num_4, four + 1, seven)`  
1.4. Recursive Call:  
 1.4.1. Compute next_num_7 = `number * 10 + 7`  
 1.4.2. Call `gen(next_num_7, four, seven + 1)`  

**2. main Function:**
2.1. Initialize `l` as empty list.  
2.2. Invoke `gen(0, 0, 0)` to populate `l`.  
2.3. Sort `l` in ascending order.  
2.4. Read integer `n` from standard input.  
2.5. Iterate over each `val` in sorted `l`:  
 2.5.1. If `val >= n`:  
  2.5.1.1. Set `ans = val`  
  2.5.1.2. Exit loop  
2.6. Output `ans` to standard output.  

**Control Flow Structures:**
- **Conditionals:**  
  - `number > limit` (recursion termination)  
  - `number > 0 AND four == seven` (list insertion condition)  
  - `val >= n` (result selection)  
- **Loops:**  
  - Iteration over sorted list `l` (linear search)  
- **Recursion:**  
  - Depth-first traversal of number generation tree  

**Input/Output Operations:**
- Input: Single integer `n` via `input()`  
- Output: Print `ans` via `print(ans)`  

**Edge Case Handling:**
- Implicit handling of `number=0` (ignored due to `number > 0` check)  
- Upper bound enforced by `limit` to prevent stack overflow  
- Empty list scenario prevented by problem constraints (minimum valid number is 44)  

**External Dependencies:**
- Standard library functions:  
  - `input()` for user input  
  - `list.sort()` for sorting  
  - `print()` for output  
- No external libraries or imports required
