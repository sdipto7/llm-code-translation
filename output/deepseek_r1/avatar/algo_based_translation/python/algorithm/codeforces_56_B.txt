**Structured Algorithm Specification**

**Function/Method Signatures:**
- `main() -> void` (No parameters, handles input, processing, and output)

**Variables:**
- `N: int` (Input size)
- `A: List[int]` (Input list of integers)
- `mn: int` (Minimum index of out-of-place element, initialized to `N + 1`)
- `mx: int` (Maximum index of out-of-place element, initialized to `-1`)
- `i: int` (Loop iteration variable)
- `modified_A: List[int]` (Temporary list after subarray reversal)

**Step-by-Step Logic Flow:**

1. **Input Operations:**
   - Read `N` from standard input as an integer.
   - Read a line of input, split into `N` integers, and store in list `A`.

2. **Determine Out-of-Place Indices:**
   - Initialize `mn = N + 1`, `mx = -1`.
   - For each `i` in range `[0, N - 1]` (0-based, inclusive):
     1. If `A[i] != i + 1`:
        - Update `mn = min(mn, i)`
        - Update `mx = max(mx, i)`

3. **Check for Fully Sorted Case:**
   - If `mx == -1`:
     - Print `"0 0"` and terminate.

4. **Subarray Reversal and Validation:**
   - Construct `modified_A` by concatenating:
     1. Subarray before `mn`: `A[0 : mn]`
     2. Reversed subarray `A[mn : mx + 1]`
     3. Subarray after `mx`: `A[mx + 1 : ]`
   - Check if `modified_A` is sorted in non-decreasing order:
     - If true: Print `(mn + 1)` and `(mx + 1)` (1-based indices).
     - Else: Print `"0 0"`.

**Control Flow Structures:**
- **Loop:** `for i in 0 to N - 1` (explicit index iteration)
- **Conditionals:**
  - `if (A[i] != i + 1)` (out-of-place check)
  - `if (mx == -1)` (no out-of-place elements)
  - `if (modified_A == sorted(modified_A))` (sorted validation)

**Input/Output Operations:**
- Read `N` via `input()` and parse as integer.
- Read and parse space-separated integers for list `A`.
- Print results as either `"0 0"` or `mn+1 mx+1`.

**Edge Case Handling:**
- Handles fully sorted input by checking `mx == -1`.
- Validates reversed subarray does not accidentally produce a sorted list (e.g., multiple out-of-place regions).

**External Dependencies:**
- Relies on list slicing and reversal for subarray operations.
- Uses a sorted list comparison to verify correctness (`sorted()` function equivalent).
