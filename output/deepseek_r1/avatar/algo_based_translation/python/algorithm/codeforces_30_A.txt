**Structured Algorithm Specification**

**Function/Method Signatures:**
```python
Function task4(A: int, B: int, n: int) -> Union[int, str]
```

**Variable Declarations:**
- `X`: int (loop variable from -1000 to 1000 inclusive)
- Input variables: `A: int`, `B: int`, `n: int` (parsed from user input)

**Logic Flow:**
1. Iterate `X` through all integers in the range [-1000, 1000] (inclusive):
   1.1. Compute `X` raised to the power of `n`.
   1.2. Multiply the result by `A`.
   1.3. If the product equals `B`, return `X` immediately.
2. If no valid `X` is found after full iteration, return the string "No solution".

**Control Flow Structures:**
- Single `for` loop with fixed range: `for X in -1000 to 1000`
- Early termination via `return X` when condition `A * (X ** n) == B` is met
- Conditional check `if` for equality comparison in each iteration

**Input/Output Operations:**
- Input:
  - Read one line containing three space-separated values
  - Split into `[A, B, n]` and convert to integers
- Output:
  - Print result of `task4` (integer or "No solution")

**Error Handling:**
- No explicit error handling for invalid input formats (assumes correct integer inputs)
- Potential unhandled `ZeroDivisionError` when `X == 0` and `n == 0` during `X**n` computation
- Implicit string return for no-solution case preserves type consistency

**Edge Case Handling:**
- Handles `n = 0` case via `X**0 = 1` (except when `X = 0`, which may cause errors)
- Zero values for `A` or `B` processed normally (returns first matching `X` or "No solution")
- Full coverage of all integers in [-1000, 1000] ensures no missed solutions within range

**Dependencies:**
- Relies on Python's `**` operator for exponentiation
- Uses standard input/output functions (`input()`, `print()`)
- No external libraries required
