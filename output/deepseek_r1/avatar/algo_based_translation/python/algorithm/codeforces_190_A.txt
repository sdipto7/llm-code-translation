**Structured Algorithm Specification**

**Function Signature**  
- `main()`  
  - **Parameters**: None  
  - **Return Type**: Void  

**Variables**  
- `n`: Integer (Input value)  
- `m`: Integer (Input value)  
- `min_val`: Integer (Computed minimum value)  
- `max_val`: Integer (Computed maximum value)  

**Input/Output Operations**  
1. Read two space-separated integers `n` and `m` from standard input.  
2. Print results to standard output.  

**Control Flow & Logic**  
1. Read `n` and `m`.  
2. **If** `n < 1`:  
   - **If** `m < 1`:  
     - Print `n` and `m` separated by a space.  
     - Terminate the program.  
   - **Else**:  
     - Print "Impossible".  
     - Terminate the program.  
3. **Else** (Proceed if `n ≥ 1`):  
   - **If** `m > n`:  
     - Set `min_val = m`.  
     - Set `max_val = n + m - 1`.  
   - **Else** (`m ≤ n`):  
     - Set `min_val = n`.  
     - Set `max_val = n + m - 1`.  
     - **If** `m == 0`:  
       - Set `max_val = n`.  
   - Print `min_val` and `max_val` separated by a space.  

**Termination**  
- Program exits after any print operation.  

**Edge Case Handling**  
- Handles `n < 1` with dependent checks on `m`.  
- Adjusts `max_val` to `n` when `m == 0` and `m ≤ n`.  

**Dependencies**  
- Standard input/output functions.  
- No external libraries or imports required.
