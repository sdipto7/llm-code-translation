**Algorithm Specification**

**Function/Method Signatures:**
- `main() -> void`

**Parameters:**
- None

**Return Types:**
- None

**Variables:**
- `n: int` (number of items)
- `L: int` (left pick cost per unit weight)
- `R: int` (right pick cost per unit weight)
- `QL: int` (left step penalty)
- `QR: int` (right step penalty)
- `W: list[int]` (list of item weights, length `n`)
- `sum_el: list[int]` (prefix sum array, length `n+1`)
- `answer: int` (minimum energy result)
- `energy: int` (temporary energy calculation)
- `i: int` (loop iterator)

**Steps:**

1. **Input Operations:**
   1. Read first input line as `n, L, R, QL, QR` (integer values).
   2. Read second input line as `W` (list of `n` integers).

2. **Prefix Sum Calculation:**
   1. Initialize `sum_el` with `[0]`.
   2. For `i` in range `1` to `n` (inclusive):
      1. Append `sum_el[i-1] + W[i-1]` to `sum_el`.

3. **Initial Answer Setup:**
   1. Set `answer = QR * (n - 1) + sum_el[n] * R`.

4. **Energy Calculation Loop:**
   1. For `i` in range `1` to `n` (inclusive):
      1. Calculate base energy: `energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])`
      2. **Penalty Conditions:**
         - If `i > (n - i)`:
           1. Add penalty: `energy += (i - (n - i) - 1) * QL`
         - Else if `(n - i) > i`:
           1. Add penalty: `energy += ((n - i) - i - 1) * QR`
      3. **Update Minimum:**
         - If `energy < answer`:
           1. Set `answer = energy`

5. **Output Operation:**
   1. Print `answer`.

**Control Flow Structures:**
- Loop: `for i in 1..n` (prefix sum initialization)
- Loop: `for i in 1..n` (energy evaluation)
- Conditional: `if i > (n - i)`
- Conditional: `else if (n - i) > i`
- Conditional: `if energy < answer` (minimum update)

**Edge Case Handling:**
- Implicit handling of split points where left/right counts are equal (no penalty)
- Correct penalty calculation when left/right count difference exceeds 1

**Input/Output Operations:**
- Read two lines from standard input
- Write result to standard output

**Dependencies:**
- Standard input/output functions
- List operations for prefix sum calculation

**Error Handling:**
- None explicitly defined (assumes valid integer inputs and correct list length)
