**Structured Algorithm Specification**

**Function/Method Signatures:**
- `solve(n: integer) → integer`
- `main() → void`

**Variable Declarations:**
- Global Scope:
  - `t: integer` (number of test cases)
- `solve` Function:
  - `s: integer` (sum of first `n` natural numbers)
  - `t: integer` (current power of 2, initialized to 1)
- `main` Loop:
  - `_` (loop counter, unused)
  - `n: integer` (input value for each test case)

**Step-by-Step Logic Flow:**

1. **Main Execution:**
   1. Read integer `t` from standard input.
   2. Iterate `t` times using a loop:
      1. Read integer `n` from standard input.
      2. Call `solve(n)` and store result.
      3. Print result.

2. **`solve` Function:**
   1. Compute initial sum `s = (1 + n) * n // 2`.
   2. Initialize `t = 1`.
   3. While loop:
      1. **Condition:** `t <= n`
      2. **Loop Body:**
         1. Subtract `2 * t` from `s`.
         2. Update `t = t * 2`.
      3. **Exit:** When `t > n`.
   4. Return final `s`.

**Control Flow Structures:**
- `for _ in range(t)` in main (fixed iteration count).
- `while t <= n` in solve (terminates when `t` exceeds `n`).

**Input/Output Operations:**
- Input:
  - First input: `t` (number of test cases).
  - Subsequent inputs: `t` integers `n` (one per test case).
- Output:
  - Print computed `s` for each test case on a new line.

**Error Handling:**
- Implicit assumption of valid integer inputs.
- No explicit error checking for non-integer or negative inputs.

**Edge Case Handling:**
- Correctly handles `n = 1` (loop runs once, subtracts 2).
- Automatically skips loop in `solve` when `n = 0` (though input constraints likely prevent this).

**External Dependencies:**
- Relies on standard input/output functions.
- No external libraries or modules used.
