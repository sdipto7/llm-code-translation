**Algorithm:**

**Function Signatures:**
- `public static void main(String[] args)`

**Parameters:**
- `args: String array` (command-line arguments)

**Variables:**
- `input: Scanner` (initialized with `System.in`)
- `n: int` (first input integer)
- `m: int` (second input integer)
- `req: ArrayList<Integer>` (size `n`, populated from input)
- `pre: ArrayList<Integer>` (size `m`, populated from input)
- `i: int` (initialized to `n - 1`)
- `j: int` (initialized to `m - 1`)
- `ans: int` (initialized to `0`)

**Input/Output Operations:**
- Read `n` and `m` via `input.nextInt()`.
- Read `n` integers into `req` using a loop.
- Read `m` integers into `pre` using a loop.
- Print final result as `ans + i + 1`.

**Logic Flow:**
1. Read `n` and `m` from standard input.
2. Populate `req` with `n` integers.
3. Populate `pre` with `m` integers.
4. Initialize `i = n - 1`, `j = m - 1`, `ans = 0`.
5. While `i >= 0` and `j >= 0`:
   - If `req.get(i) > pre.get(j)`:
     - Increment `ans` by 1.
   - Else:
     - Decrement `j` by 1.
   - Decrement `i` by 1.
6. After loop termination, compute and output `ans + i + 1`.

**Control Structures:**
- For loops to read `n` and `m` elements into lists.
- While loop with condition `i >= 0 && j >= 0`.
- Conditional statement comparing `req.get(i)` and `pre.get(j)`.

**Dependencies:**
- `java.util.ArrayList`
- `java.util.Scanner`
