- **Function Signatures**:
  - `public static void main(String[] args)`
  - `FastReader` class methods: `next()`, `nextInt()`, `nextLong()`, `nextDouble()`, `nextLine()`
  
- **Variables**:
  - Input: `int n`, `int m`
  - `Set<Integer> bannedRows`, `Set<Integer> bannedCols`
  - Intermediate: `int answer`, `int mid` (when n is odd)
  - Loop variables: `int i`, `int r`, `int c`

- **Logic Flow**:
  1. Read `n` and `m` from input
  2. Initialize empty `bannedRows` and `bannedCols` HashSets
  3. Loop `m` times:
     - Read `r` and `c`
     - If `r > 1 && r < n`, add `r` to `bannedRows`
     - If `c > 1 && c < n`, add `c` to `bannedCols`
  4. Calculate `answer = (n - 2) * 2`
  5. Subtract `bannedRows.size()` from `answer`
  6. Subtract `bannedCols.size()` from `answer`
  7. If `n` is odd:
     - Compute `mid = (n + 1) / 2`
     - If `mid` is **not** in `bannedRows` **AND** `mid` is **not** in `bannedCols`, decrement `answer` by 1
  8. Print `answer`

- **Control Structures**:
  - `for (int i = 0; i < m; i++)` loop
  - Nested `if` conditions for banning rows/cols
  - `if (n % 2 != 0)` branch with nested `if` condition for midpoint check

- **I/O Operations**:
  - Input via `FastReader` custom class (wraps `BufferedReader` and `StringTokenizer`)
  - Output via `PrintWriter` to stdout

- **Dependencies**:
  - `java.util.*` (Sets, Collections)
  - `java.io.*` (BufferedReader, IOException, PrintWriter)
  - `static java.lang.Math.*` (unused in actual logic)
