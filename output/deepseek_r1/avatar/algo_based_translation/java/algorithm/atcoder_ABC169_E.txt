**Function Signature:**
- `public static void main(String[] args) throws Exception`

**Variables:**
- `int num = 998244353` (unused)
- `BufferedReader bf` initialized with `System.in`
- `PrintWriter out` initialized with `System.out`
- `int n` from parsed input
- `ArrayList<Integer> ai` for first values of each pair
- `ArrayList<Integer> bi` for second values of each pair

**Input Processing:**
1. Read integer `n` from input.
2. For `n` iterations:
   - Read two integers per line.
   - Add first integer to `ai`.
   - Add second integer to `bi`.
3. Sort `ai` and `bi` in ascending order.

**Logic Flow:**
1. If `n % 2 == 1` (odd):
   - Calculate median of `ai` via `ai.get(ai.size() / 2)`.
   - Calculate median of `bi` via `bi.get(bi.size() / 2)`.
   - Output `(bi_median - ai_median + 1)`.
2. Else (even):
   - Compute midpoint average for `ai`: `(ai.get(n/2 - 1) + ai.get(n/2)) / 2.0`.
   - Compute midpoint average for `bi`: `(bi.get(n/2 - 1) + bi.get(n/2)) / 2.0`.
   - Calculate `2 * (bi_avg - ai_avg) + 1`, cast to integer, and output.

**Control Structures:**
- `for` loop: `for (int i = 0; i < n; i++)`
- `if-else` conditional on `n % 2 == 1`

**Dependencies:**
- `java.util.*` (for `ArrayList`, `Collections`, `StringTokenizer`)
- `java.io.*` (for `BufferedReader`, `InputStreamReader`, `PrintWriter`, `IOException`)

**Output Operations:**
- Print results via `out.println()` followed by `out.close()`.
