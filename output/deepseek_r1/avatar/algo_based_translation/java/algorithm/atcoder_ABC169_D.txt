**Algorithm:**

**Function Signature:**
- `public static void main(String[] args)`

**Variables:**
- `Scanner scanner` (Scanner type, initialized with `System.in`)
- `long n` (initialized via `scanner.nextLong()`)
- `int sqrt` (initialized as `(int) Math.sqrt(n)`)
- `int answer` (initialized to `0`)
- `int i` (loop variable from `2` to `sqrt`)
- `int count` (initialized to `0` within outer loop)
- `int j` (loop variable starting from `1`)

**Logic Flow:**
1. Read input `n` from standard input.
2. Compute integer square root of `n`, store in `sqrt`.
3. Initialize `answer` to `0`.
4. Loop `i` from `2` to `sqrt` (inclusive):
   1. Reset `count` to `0`.
   2. While `n` is divisible by `i` (`n % i == 0`):
      1. Divide `n` by `i`.
      2. Increment `count` by `1`.
   3. Loop `j` starting from `1`:
      1. If `count - j` is non-negative:
         1. Subtract `j` from `count`.
         2. Increment `answer` by `1`.
      2. Break loop when `count - j` becomes negative.
5. After outer loop, check if `n > 1`:
   1. Increment `answer` by `1`.
6. Print `answer` to standard output.

**Control Structures:**
- `for (int i = 2; i <= sqrt; i++)`
- `while (0 == (n % i))`
- `for (int j = 1; count - j >= 0; j++)`
- `if (n > 1)`

**Input/Output:**
- Input: Read `long n` via `Scanner`.
- Output: Print final `answer` via `System.out.println`.

**Dependencies:**
- `java.util.Scanner` (imported for input handling).
