- **Function Signature**:
  - `public static void main(String[] args)`
- **Variables**:
  - `Scanner sc = new Scanner(System.in)`
  - `int M = 1000000007`
  - `char[] s` (input string as character array)
  - `int n = s.length`
  - `int[][] dp = new int[n + 1][2]`
- **Initialization**:
  - `dp[0][0] = 1`
- **Logic Flow**:
  1. Read input string via `sc.nextLine()` and convert to `char[] s`.
  2. Initialize `dp` array with dimensions `(n + 1) x 2`.
  3. Loop `i` from `0` to `n - 1`:
     - **If** `s[i] == '0'`:
       - Set `dp[i+1][0] = dp[i][0]`
       - Set `dp[i+1][1] = dp[i][1]`
     - **Else**:
       - Set `dp[i+1][1] = (dp[i][0] + dp[i][1]) % M`
     - **If** `s[i] == '0'`:
       - Update `dp[i+1][1] += (dp[i][1] * 2) % M`
       - Apply `dp[i+1][1] %= M`
     - **Else**:
       - Update `dp[i+1][0] += (dp[i][0] * 2) % M`
       - Update `dp[i+1][1] += (dp[i][1] * 2) % M`
       - Apply `dp[i+1][0] %= M` and `dp[i+1][1] %= M`
  4. Compute result as `(dp[n][0] + dp[n][1]) % M` and print.
- **Control Structures**:
  - `for (int i = 0; i < n; i++)`
  - Nested `if-else` conditions based on `s[i] == '0'`
- **Input/Output**:
  - Input: Read line via `Scanner`, stored as `char[] s`.
  - Output: Print `(dp[n][0] + dp[n][1]) % M`.
- **Dependencies**:
  - `import java.util.Scanner`
