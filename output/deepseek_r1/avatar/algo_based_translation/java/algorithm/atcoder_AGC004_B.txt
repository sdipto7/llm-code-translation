**Function Signatures:**
- `public static void main(String[] args)`  
  **Parameters:** `String[] args`  
  **Return:** `void`  

**Variables:**
- `N: int`  
- `x: long`  
- `srimeList: List<Long>` (size `N`)  
- `costList: List<Long[]>` (each array size `N`)  
- `result: List<Long>`  
- `scan: Scanner`  

**Logic Flow:**  
1. Read `N` and `x` from standard input.  
2. Read `N` long values into `srimeList`.  
3. Initialize `costList` with `N` arrays of size `N`.  
4. For each `i` in `[0, N-1]`:  
   - Set `costList[i][0]` to `srimeList.get(i)`.  
   - For each `castNum` in `[1, N-1]`:  
     - Compute `index = (i - castNum + N) % N`.  
     - Set `costList[i][castNum]` as `Math.min(costList[i][castNum-1], srimeList.get(index))`.  
5. For each `i` in `[0, N-1]`:  
   - Compute `sum = sum of costList[j][i]` for all `j` in `[0, N-1]`.  
   - Add `i * x + sum` to `result`.  
6. Find and print the minimum value in `result`.  

**Control Structures:**  
- Loops:  
  - `for (int i = 0; i < N; i++)` (3 times)  
  - `for (int castNum = 1; castNum < N; castNum++)`  
- Conditional:  
  - `Math.min` in `costList` computation  

**Input/Output:**  
- **Input:**  
  - Read `N` (int), `x` (long), and `N` long values via `Scanner`.  
- **Processing:**  
  - Precompute `costList` using nested loops and minima.  
  - Compute `result` entries for all possible shift counts.  
- **Output:**  
  - Print the minimum value in `result`.  

**Dependencies:**  
- `java.util.Scanner`  
- `java.util.ArrayList`  
- `java.util.List`
