- **Function Signature**:  
  `public static void main(String[] args)`  

- **Variables**:  
  - `Scanner sc = new Scanner(System.in)`  
  - `int N = sc.nextInt()`  
  - `int T = sc.nextInt()`  
  - `int[][] AB = new int[N][2]`  
  - `int[][] dp = new int[N + 1][6001]`  
  - Loop indices: `int i` (0 to N-1), `int timeAfterEat` (0 to 6000)  
  - Temporal variables: `int time = AB[i - 1][0]`, `int value = AB[i - 1][1]`  

- **Input Operations**:  
  1. Read `N` and `T` from standard input.  
  2. Read `N` pairs of integers into `AB[][]`.  

- **Data Processing**:  
  1. Sort `AB` in ascending order by the first element of each pair using `Comparator.comparingInt(a -> a[0])`.  
  2. Initialize `dp` with dimensions `(N+1) x 6001`, filled with zeros.  

- **Control Structures**:  
  - Loop `i` from `0` to `N-1` to read input into `AB`.  
  - Loop `i` from `1` to `N` (inclusive):  
    - Loop `timeAfterEat` from `0` to `6000` (inclusive):  
      1. Set `dp[i][timeAfterEat]` to the maximum of its current value or `dp[i-1][timeAfterEat]`.  
      2. Compute `time` and `value` from `AB[i-1]`.  
      3. If `timeAfterEat - time >= 0` and `timeAfterEat - time < T`:  
          - Update `dp[i][timeAfterEat]` to the maximum of its current value or `dp[i-1][timeAfterEat - time] + value`.  

- **Output Operation**:  
  Print the maximum value in `dp[N]` using `Arrays.stream(dp[N]).max().getAsInt()`.  

- **Required Libraries**:  
  `java.util.Arrays`, `java.util.Comparator`, `java.util.Scanner`
