Here's the extracted algorithm:

1. **Input Reading:**
   - Read integers H and W
   - Read 10x10 integer matrix c

2. **Initialize Minimum Cost Array:**
   - Create integer array min[10]
   - For i from 0 to 9:
     - min[i] = c[i][1]

3. **Compute Optimal Path Costs:**
   - For tc from 0 to 9:
     - For i from 0 to 9:
       - For j from 0 to 9:
         - min[i] = minimum of min[i] and (c[i][j] + min[j])

4. **Process Grid and Calculate Total Cost:**
   - Initialize ans = 0
   - For h from 1 to H:
     - For w from 1 to W:
       - Read integer A
       - If A >= 0:
         - ans += min[A]

5. **Output Result:**
   - Print ans

**Data Structures:**
- 2D array c[10][10] (integer)
- 1D array min[10] (integer)
- Scalar variables H, W, ans (integers)

**Control Flow:**
- Triple nested loops for path computation (tc, i, j)
- Double nested loops for grid processing (h, w)
- Conditional check (A >= 0)

**Input/Output:**
- Input: H, W followed by 100 integers for c matrix, then H*W grid values
- Output: Single integer total cost

**Computational Complexity:**
- O(10^3) for path computation
- O(H*W) for grid processing
