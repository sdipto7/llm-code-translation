Function signatures with parameter and return types:
- `public static void main(String[] args)`

Variable declarations and data types:
- `Scanner in` for input
- `PrintWriter pw` for output
- `int n` for number of elements
- `int[] ara` for array of input numbers
- `Map<Integer, Integer> map` for counting occurrences of each number
- `int max` for the maximum occurrence count
- `Map<Integer, Integer> mm` for tracking occurrences during the second pass

Complete logic flow in execution order:
1. Initialize `Scanner` for input and `PrintWriter` for output.
2. Read integer `n` from input.
3. Initialize array `ara` of size `n`.
4. Initialize `map` to store the count of each number.
5. Loop `i` from 0 to `n-1`:
   - Read integer `v` from input.
   - Assign `v` to `ara[i]`.
   - If `v` is not in `map`, add `v` with count 1.
   - Otherwise, increment the count of `v` in `map`.
6. Initialize `max` to 0.
7. Loop through values in `map`:
   - Update `max` to be the maximum of `max` and the current value.
8. Initialize `mm` to track occurrences during the second pass.
9. Loop `i` from 0 to `n-1`:
   - If `ara[i]` is not in `mm`, add `ara[i]` with count 1.
   - If the count of `ara[i]` in `mm` equals `max`, print `ara[i]` and break the loop.
   - Otherwise, increment the count of `ara[i]` in `mm`.
10. Close `PrintWriter`.

Control structures:
- `for` loops for iterating through array and map values.
- `if` statements for checking the presence of a key in the map and comparing counts.

Input/output operations and data processing logic:
- Input: Read integer `n` followed by `n` integers.
- Output: Print the first number that reaches the maximum occurrence count.
- Data processing: Use maps to count occurrences of each number and determine the first number to reach the maximum count.

Required libraries, modules, or dependencies:
- `java.io.*` for `Scanner` and `PrintWriter`.
- `java.util.*` for `Map` and `HashMap`.
