Function signature: `public static void main(String[] args)`

Variable declarations and data types:
- `Scanner sc = new Scanner(System.in)`
- `int v1 = sc.nextInt()`
- `int v2 = sc.nextInt()`
- `int t = sc.nextInt()`
- `int d = sc.nextInt()`
- `long[][] dp = new long[t - 1][1150]`
- `long sum = 0`
- `long ans = Long.MIN_VALUE`

Logic flow:
1. Initialize `dp` array with dimensions `[t - 1][1150]` and fill it with `-1e17`
2. Set `dp[0][v1] = v1`
3. For `i` from `1` to `t - 2` (inclusive):
   a. For `j` from `0` to `1149` (inclusive):
      i. For `x` from `0` to `d` (inclusive):
         1. If `j + x < 1150`, update `dp[i][j] = max(dp[i][j], dp[i - 1][j + x] + j)`
      ii. For `x` from `d` to `0` (inclusive):
          1. If `j - x >= 0`, update `dp[i][j] = max(dp[i][j], dp[i - 1][j - x] + j)`
4. For `i` from `t - 2` to `t - 2` (inclusive):
   a. For `j` from `0` to `1149` (inclusive):
      i. If `abs(j - v2) <= d`, update `ans = max(ans, dp[i][j] + v2)`
5. Print `ans`

Input/output operations and data processing logic:
- Read four integers from standard input: `v1`, `v2`, `t`, `d`
- Perform dynamic programming to compute maximum distance
- Output the result `ans` to standard output

Required libraries, modules, or dependencies:
- `java.util.Arrays`
- `java.util.Scanner`
