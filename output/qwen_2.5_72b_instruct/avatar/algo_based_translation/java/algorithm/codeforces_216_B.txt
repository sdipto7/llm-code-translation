- Libraries: java.util.Iterator, java.util.LinkedList, java.util.Scanner

- Class: codeforces_216_B

- Variables:
  - count: int
  - seen: boolean[]
  - path: int (initialized to 0)
  - cycle: int (initialized to 1)
  - graph: LinkedList<LinkedList<Integer>>

- Function: int dfs(int child, int par)
  - if seen[child] == true return cycle
  - seen[child] = true
  - for each Integer i in graph.get(child)
    - if i != par
      - count++
      - if dfs(i, child) == cycle return cycle
  - return path

- Main Function: public static void main(String[] args)
  - Scanner sc = new Scanner(System.in)
  - int m = sc.nextInt()
  - int n = sc.nextInt()
  - codeforces_216_B ft = new codeforces_216_B()
  - ft.graph = new LinkedList<>()
  - for i from 0 to m (inclusive)
    - ft.graph.add(new LinkedList<Integer>())
  - ft.seen = new boolean[m + 1]
  - for i from 0 to n (exclusive)
    - int x = sc.nextInt()
    - int y = sc.nextInt()
    - ft.graph.get(x).add(y)
    - ft.graph.get(y).add(x)
  - int toremove = 0
  - for i from 1 to m (inclusive)
    - if !ft.seen[i]
      - ft.count = 0
      - if ft.dfs(i, 0) == ft.cycle
        - if ft.count % 2 == 1
          - toremove++
  - if (m - toremove) % 2 == 1
    - toremove++
  - System.out.println(toremove)
