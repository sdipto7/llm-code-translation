Function signatures with parameter and return types:
- `main(String[] args)`: void
- `FastReader()`: constructor
- `next()`: String
- `nextInt()`: int
- `nextLong()`: long
- `nextDouble()`: double
- `nextLine()`: String

Variable declarations and data types:
- `n`: int
- `left`: TreeSet<Integer>
- `answer`: int[]
- `q`: int
- `l`: int
- `r`: int
- `win`: int
- `curr`: int
- `ans`: StringBuilder
- `st`: StringTokenizer
- `br`: BufferedReader
- `s`: String

Complete logic flow in execution order:
1. Create `FastReader` instance `in`
2. Read `n` using `in.nextInt()`
3. Initialize `TreeSet<Integer>` named `left`
4. Initialize `int[]` named `answer` with size `n`
5. For loop (`i` from 0 to `n-1`):
   - Add `i` to `left`
6. Read `q` using `in.nextInt()`
7. While loop (`q > 0`):
   - Decrement `q`
   - Read `l` using `in.nextInt()` and subtract 1
   - Read `r` using `in.nextInt()` and subtract 1
   - Read `win` using `in.nextInt()`
   - While loop (`left.ceiling(l) != null && left.ceiling(l) <= r`):
     - Set `curr` to `left.ceiling(l)`
     - Assign `win` to `answer[curr]`
     - Remove `curr` from `left`
   - Assign 0 to `answer[win-1]`
   - Add `win-1` to `left`
8. Create `StringBuilder` instance `ans`
9. For loop (`i` from 0 to `n-1`):
   - Append `answer[i]` converted to String to `ans`
10. Print `ans`

Control structures:
- For loop (`i` from 0 to `n-1`)
- While loop (`q > 0`)
- While loop (`left.ceiling(l) != null && left.ceiling(l) <= r`)

Input/output operations and data processing logic:
- Input reading using `FastReader` methods (`nextInt()`, `nextLine()`)
- Output writing using `System.out.println(ans)`

Required libraries, modules, or dependencies:
- `java.util.*`
- `java.io.*`
