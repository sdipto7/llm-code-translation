- Import sys module
- Set recursion limit to 10^5 using sys.setrecursionlimit
- Define class Node with constructor initializing val=None, color=None, and a=[]
- Read integer n from input representing number of nodes
- Initialize list nodes containing n instances of Node
- For i in range(n-1):
    - Read integers u, v, w from input
    - Assign node1 as nodes[u-1], node2 as nodes[v-1]
    - Set node1.val to u, node2.val to v
    - Append [node2, w] to node1.a, [node1, w] to node2.a
- Assign root as nodes[0], set root.color to True
- Initialize empty set nodeSet
- Define function traverse(node, distance)
    - If node in nodeSet: return
    - Else: add node to nodeSet
    - For each pair in node.a:
        - Assign adjNode as pair[0], dis as pair[1]
        - If (distance + dis) % 2 == 0: set adjNode.color to root.color
        - Else: set adjNode.color to not root.color
        - Call traverse(adjNode, distance + dis)
- Call traverse(root, 0)
- For i in range(n):
    - Assign node as nodes[i]
    - If node.color: print 1
    - Else: print 0
