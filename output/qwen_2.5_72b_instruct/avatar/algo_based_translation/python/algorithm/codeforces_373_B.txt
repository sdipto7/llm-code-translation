Function signature: `sum(k: int) -> int`

Variable declarations:
- `ret: int = 0`
- `pw: int = 10`
- `len: int = 1`
- `cur: int`
- `prev: int`
- `w: int`
- `m: int`
- `k: int`
- `lo: int = 0`
- `hi: int = int(1e18)`
- `md: int`
- `c: int`

Logic flow:
1. Input values for `w`, `m`, and `k` as integers.
2. Initialize `lo` to 0 and `hi` to 1e18.
3. While `hi - lo > 1`:
   1. Calculate `md` as `(lo + hi) // 2`.
   2. Calculate `c` as `sum(m + md - 1) - sum(m - 1)`.
   3. If `c * k <= w`:
      1. Set `lo` to `md`.
   4. Else:
      1. Set `hi` to `md`.
4. Print `lo`.

Function `sum(k: int) -> int`:
1. Initialize `ret` to 0.
2. Initialize `pw` to 10.
3. Initialize `len` to 1.
4. While `True`:
   1. Calculate `cur` as `min(pw - 1, k)`.
   2. Calculate `prev` as `pw // 10`.
   3. Increment `ret` by `(cur - prev + 1) * len`.
   4. If `pw - 1 >= k`:
      1. Break the loop.
   5. Increment `len` by 1.
   6. Multiply `pw` by 10.
5. Return `ret`.
