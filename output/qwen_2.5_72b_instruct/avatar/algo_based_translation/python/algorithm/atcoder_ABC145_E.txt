Function signatures with parameter and return types:
- `main() -> None`

Variable declarations and data types:
- `sys` as module
- `itemgetter` as function from `operator` module
- `input` as function
- `TIME` as constant integer
- `VAL` as constant integer
- `N` as integer
- `T` as integer
- `time_value` as list of tuples of integers
- `dp` as list of lists of integers
- `val_acum` as integer
- `t` as integer
- `max_val` as integer

Complete logic flow in execution order:
1. Import `sys` module
2. Import `itemgetter` from `operator` module
3. Define `input` as `sys.stdin.readline`
4. Set constants `TIME` and `VAL` to 0 and 1 respectively
5. Read first line of input, split into two integers `N` and `T`
6. Initialize `time_value` as list with `( -1, -1 )` and `None` repeated `N` times
7. For each integer `i` from 1 to `N`, read a line of input, split into two integers, and store as tuple in `time_value[i]`
8. Sort `time_value` based on second element of each tuple (value)
9. Initialize `dp` as 2D list with dimensions `(N+1) x T`, filled with `-1`
10. For each integer `t` from 0 to `T-1`, set `dp[0][t]` to 0
11. For each integer `n` from 1 to `N`, set `dp[n][0]` to 0
12. For each integer `n` from 1 to `N`, for each integer `t` from 1 to `T-1`:
    - If `time_value[n][TIME]` is greater than `t`, set `dp[n][t]` to `dp[n-1][t]`
    - Else, set `dp[n][t]` to maximum of `dp[n-1][t]` and `time_value[n][VAL] + dp[n-1][t-time_value[n][TIME]]`
13. Set `val_acum` to `time_value[N][VAL]`
14. Set `t` to `T-1`
15. Set `max_val` to `val_acum + dp[N-1][t]`
16. For each integer `n` from `N-1` to 1:
    - Add `time_value[n][VAL]` to `val_acum`
    - Subtract `time_value[n+1][TIME]` from `t`
    - If `t` is less than 0, break loop
    - Else, update `max_val` to maximum of `max_val` and `val_acum + dp[n-1][t]`
17. Print `max_val`

Control structures:
- For loops: Iterating over ranges of integers
- If-Else statements: Conditional checks based on time comparisons

Input/output operations and data processing logic:
- Input: Reading integers from standard input
- Output: Printing the final `max_val` to standard output
- Data processing: Sorting, dynamic programming table updates, value accumulation

Required libraries, modules, or dependencies:
- `sys` module
- `operator` module
