Function Signatures:
- `public static void main(String[] args) throws IOException`
- `static String next() throws IOException`
- `static int nextInt() throws IOException`
- `static double nextDouble() throws IOException`
- `static long nextLong() throws IOException`
- `static float nextFloat() throws IOException`

Variable Declarations and Data Types:
- `int n`
- `int[][] arr`
- `int[][] dp`
- `int max`

Logic Flow and Control Structures:

1. Read an integer `n` from input.
2. Initialize a 2D array `arr` of size `n x 3`.
3. For each `i` from `0` to `n-1`:
   - For each `j` from `0` to `2`:
     - Read an integer and assign it to `arr[i][j]`.
4. Initialize a 2D array `dp` of size `n x 3`.
5. Set `dp[0][0]` to `arr[0][0]`.
6. Set `dp[0][1]` to `arr[0][1]`.
7. Set `dp[0][2]` to `arr[0][2]`.
8. For each `i` from `1` to `n-1`:
   - For each `j` from `0` to `2`:
     - If `j` is `0`:
       - Set `dp[i][j]` to the maximum of `arr[i][0] + dp[i-1][1]` and `arr[i][0] + dp[i-1][2]`.
     - If `j` is `1`:
       - Set `dp[i][j]` to the maximum of `arr[i][1] + dp[i-1][0]` and `arr[i][1] + dp[i-1][2]`.
     - If `j` is `2`:
       - Set `dp[i][j]` to the maximum of `arr[i][2] + dp[i-1][1]` and `arr[i][2] + dp[i-1][0]`.
9. Initialize `max` to `-1`.
10. For each `i` from `0` to `2`:
    - If `dp[n-1][i]` is greater than `max`, then set `max` to `dp[n-1][i]`.
11. Print the value of `max`.

Input/Output Operations:
- Read integers from standard input.
- Print an integer to standard output.

Data Processing Logic:
- The algorithm reads a sequence of integers, organizes them into a 2D array, and uses dynamic programming to determine the maximum value obtainable by selecting one element from each row such that no two selected elements are from the same column in consecutive rows.

Required Libraries/Modules/Dependencies:
- `java.util.*`
- `java.io.*`
- `java.lang.*`
