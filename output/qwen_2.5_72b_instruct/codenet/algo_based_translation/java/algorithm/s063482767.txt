Function signatures with parameter and return types:
- `main(String[] args): void`

Variable declarations and data types:
- `sc: Scanner`
- `n: int`
- `queue: PriorityQueue<Integer>`
- `sum: int`

Complete logic flow in execution order:
1. Create a `Scanner` object `sc` to read input.
2. Read an integer `n` from the standard input.
3. Initialize a `PriorityQueue<Integer>` named `queue`.
4. For `i` from 0 to `n-1`, do:
   - Read an integer from the standard input.
   - Add the integer to `queue`.
5. Initialize an integer `sum` to 0.
6. For `i` from 0 to `n-2`, do:
   - Poll the smallest element from `queue` and add it to `sum`.
7. Poll the smallest remaining element from `queue`.
8. If the polled element is less than `sum`, print "Yes".
9. Otherwise, print "No".

Control structures:
- For loop: `for(int i = 0; i < n; i++)`
- For loop: `for(int i = 0; i < n - 1; i++)`
- Conditional: `if(queue.poll() < sum)`

Input/output operations and data processing logic:
- Input: Read integer `n` and then `n` integers.
- Output: Print "Yes" or "No" based on the comparison between the last polled element and `sum`.

Required libraries, modules, or dependencies:
- `java.util.*`
