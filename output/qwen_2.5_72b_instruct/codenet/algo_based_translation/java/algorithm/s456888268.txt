Function signatures with parameter and return types:
- `static void solve()`
- `static void reverse(int ar[])`
- `static void reverse(long ar[])`
- `static void reverse(double ar[])`
- `static void reverse(char ar[])`
- `static String getReverse(String s)`
- `static <T> void reverse(List<T> ls)`
- `static <T> void reverse(T[] ar)`
- `static void sbnl()`
- `static int lowerBound(int[] a, int x)`
- `static int upperBound(int[] a, int x)`
- `static int rlowerBound(int[] a, int x)`
- `static int rupperBound(int[] a, int x)`
- `static int lowerBound(long[] a, long x)`
- `static int upperBound(long[] a, long x)`
- `static int rlowerBound(long[] a, long x)`
- `static int rupperBound(long[] a, long x)`
- `static int lowerBound(double[] a, double x)`
- `static int upperBound(double[] a, double x)`
- `static int rlowerBound(double[] a, double x)`
- `static int rupperBound(double[] a, double x)`
- `static int lowerBound(char[] a, char x)`
- `static int upperBound(char[] a, char x)`
- `static int rlowerBound(char[] a, char x)`
- `static int rupperBound(char[] a, char x)`
- `static <T> int lowerBound(List<T> ls, T x) throws RuntimeException`
- `static <T> int upperBound(List<T> ls, T x) throws RuntimeException`
- `static <T> int rupperBound(List<T> ls, T x) throws RuntimeException`
- `static <T> int rlowerBound(List<T> ls, T x)`
- `static int[] concat(int x, int arr[])`
- `static int[] concat(int arr[], int x)`
- `static long[] concat(long x, long arr[])`
- `static long[] concat(long arr[], long x)`
- `static int max(int x, int y)`
- `static int min(int x, int y)`
- `static int max(int x, int y, int z)`
- `static int min(int x, int y, int z)`
- `static long max(long x, long y)`
- `static long min(long x, long y)`
- `static long max(long x, long y, long z)`
- `static long min(long x, long y, long z)`
- `static double max(double x, double y)`
- `static double min(double x, double y)`
- `static double max(double x, double y, double z)`
- `static double min(double x, double y, double z)`
- `static void sort(int[] ar)`
- `static void sort(long[] ar)`
- `static void sort(double[] ar)`
- `static void sort(char[] ar)`
- `static void rsort(int[] ar)`
- `static void rsort(long[] ar)`
- `static void rsort(double[] ar)`
- `static void rsort(char[] ar)`
- `static void fill(int arr[], int x)`
- `static void fill(long arr[], long x)`
- `static void fill(boolean arr[], boolean x)`
- `static void fill(double arr[], double x)`
- `static void fill(int arr[][], int x)`
- `static void fill(long arr[][], long x)`
- `static void fill(double arr[][], double x)`
- `static void fill(boolean arr[][], boolean x)`
- `static long plus(long x, long y)`
- `static long sub(long x, long y)`
- `static long mul(long x, long y)`
- `static long div(long x, long y)`
- `static long pow(long x, long y)`
- `public static void main(String[] args) throws Exception`
- `private static int readByte()`
- `private static boolean isSpaceChar(int c)`
- `private static int skip()`
- `private static double nd()`
- `private static char nc()`
- `private static String ns()`
- `private static char[] ns(int n)`
- `private static char[][] nm(int n, int m)`
- `private static int[] na(int n)`
- `private static long[] nla(int n)`
- `private static int ni()`
- `private static long nl()`

Variable declarations and data types:
- `String tmp`
- `char s[]`
- `int n`
- `int ans`
- `int cnt`
- `int len`
- `int t`
- `char c[]`
- `sz`
- `T t`
- `x`, `y`, `z`
- `l`, `r`, `c`
- `tmp`
- `res`
- `root`
- `num`
- `b`
- `minus`
- `ar[]`
- `ls`
- `map[][]`
- `a[]`
- `ret[]`
- `inbuf[]`
- `lenbuf`
- `ptrbuf`

Complete logic flow in execution order:
1. `main` function initializes `is` and `out`.
2. `main` calls `solve`.
3. `solve` reads a string `tmp` using `ns`.
4. Converts `tmp` to character array `s`.
5. Initializes `n` to length of `s`.
6. Initializes `ans` and `cnt` to 0.
7. Loops over each character in `s`:
   - If character is 'S', increments `cnt`.
   - If character is not 'S':
     - If `cnt` is 0, continues to next iteration.
     - Increments `ans`.
     - Decrements `cnt`.
8. Computes `n - 2*ans` and prints it using `out.println`.

Control structures:
- For loop iterating over each character in `s`.
- Conditional checks for character 'S' and `cnt` value.

Input/output operations and data processing logic:
- Reads input string using `ns`.
- Processes string to count pairs of 'S' and non-'S' characters.
- Outputs the result using `out.println`.

Required libraries, modules, or dependencies:
- `java.io.*`
- `java.util.*`
