Function signatures with parameter and return types:
- `run(): void`

Variable declarations and data types:
- `sc: Scanner`
- `DEVISOR: long` (constant)
- `n: long`
- `k: long`
- `ans: long`
- `i: long`
- `max: long`
- `min: long`

Complete logic flow in execution order:
1. Create a new instance of `Scanner` and assign it to `sc`.
2. Assign the constant value `1000000000 + 7` to `DEVISOR`.
3. In the `main` method, create a new instance of `Main` and call its `run` method.
4. Inside `run` method, read a long integer from `sc` and assign it to `n`.
5. Read another long integer from `sc` and assign it to `k`.
6. Initialize `ans` to 0.
7. Start a `for` loop with `i` initialized to `k`, loop continues while `i` is less than or equal to `n + 1`, increment `i` by 1 in each iteration:
   - Calculate `max` using the formula `i * (2 * n - i + 1) / 2`.
   - Calculate `min` using the formula `i * (i - 1) / 2`.
   - Update `ans` by adding `(max - min + 1) % DEVISOR` to it.
8. After the loop, print `ans % DEVISOR`.

Control structures:
- `for` loop: Condition is `i <= n + 1`.

Input/output operations and data processing logic:
- Input: Two long integers `n` and `k` are read from standard input.
- Output: A single long integer representing the result is printed to standard output.
- Data processing: Calculations involve arithmetic operations and modulo operations to compute the range of sums and accumulate the result.

Required libraries, modules, or dependencies:
- `java.util.*`
