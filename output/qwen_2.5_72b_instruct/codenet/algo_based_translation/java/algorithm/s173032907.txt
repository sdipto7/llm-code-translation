Function signatures with parameter and return types:
- `main(String[] args): void`
- `run(): void`

Variable declarations and data types:
- `sc: Scanner`
- `n: int`
- `a: int[]`
- `cost1: long`
- `cost2: long`
- `current1: int`
- `current2: int`
- `dp1: long[]`
- `dp2: long[]`
- `i: int`
- `j: int`

Complete logic flow in execution order:
1. Create a new `Scanner` object for reading input.
2. Start a new thread with a new `Main` instance and a specified stack size.
3. Read an integer `n` from input.
4. Create an integer array `a` of size `n`.
5. For each index `i` from `0` to `n-1`, read an integer from input and store it in `a[i]`.
6. Initialize `cost1`, `cost2`, `current1`, and `current2` to `0`.
7. Create two long arrays `dp1` and `dp2` of size `n`.
8. For each index `i` from `0` to `n-1` and `j` from `n-1` to `0`:
   1. Add the absolute difference between `a[i]` and `current1` to `cost1`.
   2. Update `current1` to `a[i]`.
   3. Store `cost1` in `dp1[i]`.
   4. Add the absolute difference between `a[j]` and `current2` to `cost2`.
   5. Update `current2` to `a[j]`.
   6. Store `cost2` in `dp2[j]`.
9. For each index `i` from `0` to `n-1`:
   1. If `i` is `0`, print `dp2[i + 1]` plus the absolute value of `a[1]`.
   2. Else if `i` is `n - 1`, print `dp1[i - 1]` plus the absolute value of `a[i - 1]`.
   3. Else, print `dp1[i - 1]` plus `dp2[i + 1]` plus the absolute difference between `a[i - 1]` and `a[i + 1]`.

Control structures:
- For loop from `0` to `n-1` for reading input and filling `a`.
- For loop from `0` to `n-1` and `j` from `n-1` to `0` for calculating `cost1`, `cost2`, and filling `dp1` and `dp2`.
- For loop from `0` to `n-1` for printing results with conditional statements.

Input/output operations and data processing logic:
- Read integers from input using `Scanner`.
- Perform arithmetic operations (addition, subtraction, absolute value calculation).
- Store results in arrays and print final results.

Required libraries, modules, or dependencies:
- `java.util.Scanner`
