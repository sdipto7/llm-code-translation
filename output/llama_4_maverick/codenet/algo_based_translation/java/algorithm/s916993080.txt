1. Define a function `readInt()` with return type `int` that reads an integer from the input.
2. Define a function `main()` with no parameters and no return type that:
   - Reads an integer `n` using `readInt()`.
   - Declares a 2D array `arr` of size `n x 3` with data type `int`.
   - Populates `arr` by reading `n * 3` integers using `readInt()`.
   - Declares a 2D array `dp` of size `n x 3` with data type `int`.
   - Initializes the first row of `dp` with the corresponding values from the first row of `arr`.
   - Iterates over the rows of `dp` starting from the second row (index 1) to the last row.
     - For each row, iterates over the columns ( indices 0, 1, and 2).
       - For column index `j`, updates `dp[i][j]` with the maximum of:
         - `arr[i][j] + dp[i-1][(j+1) % 3]` and `arr[i][j] + dp[i-1][(j+2) % 3]`.
3. Finds the maximum value `max` among the elements of the last row of `dp`.
4. Outputs `max` to the console.

Required libraries:
- Input/Output library for reading input and writing output.

Data processing logic:
- Dynamic programming to fill the `dp` array based on the values in `arr`.
- Finding the maximum value in the last row of `dp`. 

Variable declarations and data types:
- `n`: `int`
- `arr`: 2D array of `int` with size `n x 3`
- `dp`: 2D array of `int` with size `n x 3`
- `max`: `int`
- `i`, `j`: loop counters of type `int` 

Function signatures:
- `readInt()`: `int`
- `main()`: `void` 

Control structures:
- Loop: iterating over rows and columns of `arr` and `dp`
- Conditional: finding the maximum value among the elements of the last row of `dp`

Input/Output operations:
- Reading `n` and the elements of `arr` using `readInt()`
- Outputting `max` to the console.
