1. Define function `bubbleSort(cards: list) -> None`
   1.1. Declare variable `n` of type `int` and assign it the length of `cards`
   1.2. Iterate from `0` to `n-1` using variable `i`
      1.2.1. Iterate from `n-1` to `i+1` in reverse order using variable `j`
         1.2.1.1. If `int(cards[j][1])` is less than `int(cards[j-1][1])`, swap `cards[j]` and `cards[j-1]`
   1.3. Print the elements of `cards` joined by a space

2. Define function `selectionSort(cards: list) -> None`
   2.1. Declare variable `n` of type `int` and assign it the length of `cards`
   2.2. Iterate from `0` to `n-1` using variable `i`
      2.2.1. Declare variable `mini` of type `int` and assign it the value of `i`
      2.2.2. Iterate from `i` to `n-1` using variable `j`
         2.2.2.1. If `int(cards[j][1])` is less than `int(cards[mini][1])`, update `mini` to `j`
      2.2.3. If `mini` is not equal to `i`, swap `cards[i]` and `cards[mini]`
   2.3. Print the elements of `cards` joined by a space

3. Read an integer `n` from input
4. Read a string from input, split it into a list of strings using space as delimiter, and assign it to `cards`
5. Create a copy of `cards` and assign it to `cards2`
6. Call `bubbleSort(cards)`
7. Print "Stable"
8. Call `selectionSort(cards2)`
9. Compare the output of `bubbleSort` and `selectionSort` by joining the elements of `cards` and `cards2` with a space
   9.1. If they are equal, print "Stable"
   9.2. Otherwise, print "Not stable"
