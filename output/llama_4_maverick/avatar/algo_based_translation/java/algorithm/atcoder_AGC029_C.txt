1. Read input: 
   1.1 Read the number of elements `n`.
   1.2 Read an array `a` of `n` integers.

2. Initialize a data structure `s` to store integers and their counts.

3. Perform binary search to find the minimum `k` for which a certain condition is met:
   3.1 Initialize `ng` to 0 and `ok` to `n`.
   3.2 While the difference between `ok` and `ng` is greater than 1:
      3.2.1 Calculate `k` as the average of `ng` and `ok`.
      3.2.2 Check if it is possible to satisfy the condition with `k` using the `isPossible` function.
      3.2.3 If the condition is satisfied, update `ok` to `k`.
      3.2.4 If the condition is not satisfied, update `ng` to `k`.

4. Output `ok` as the result.

5. `isPossible(k)` function:
   5.1 Clear the data structure `s`.
   5.2 Initialize a variable `current` to 0.
   5.3 Iterate through each element `ai` in the array `a`:
      5.3.1 If `ai` is less than or equal to `current`:
         5.3.1.1 If `k` equals 1, return false.
         5.3.1.2 Remove entries from `s` that have keys greater than or equal to `ai`.
         5.3.1.3 Initialize `p` to `ai - 1`.
         5.3.1.4 While true:
            5.3.1.4.1 If `p` is less than 0, return false.
            5.3.1.4.2 Increment the count of `p` in `s` by 1.
            5.3.1.4.3 If the count of `p` equals `k`, remove `p` from `s` and decrement `p`.
            5.3.1.4.4 If the count of `p` is not equal to `k`, break the loop.
      5.3.2 Update `current` to `ai`.
   5.4 Return true.
