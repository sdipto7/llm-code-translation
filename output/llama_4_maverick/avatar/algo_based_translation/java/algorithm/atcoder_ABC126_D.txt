1. Initialize an array `colors` of size `n` with all elements as `-1`.
2. Create an array `points` of size `n` where each element is an object of type `Point` initialized with a unique identifier from `0` to `n-1`.
3. Read `n-1` edges from the input where each edge is represented by two node indices `me` and `you`, and a length `length`.
4. For each edge, add `you` to `me`'s friends list with the given `length` and add `me` to `you`'s friends list with the same `length`.
5. Perform a depth-first search (DFS) starting from `points[0]` with an initial length of `0`.
6. During DFS, for each node:
   a. Check if the node's color is already known. If yes, return.
   b. Assign a color to the node based on the length of the path from the starting node: `0` if the length is even, `1` if it's odd.
   c. Recursively visit all unvisited neighbors of the node, incrementing the length by the edge length to each neighbor.
7. Output the assigned color for each node.
