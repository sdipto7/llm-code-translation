1. Read input values N and T.
2. Read N pairs of values into a 2D array AB, where each pair represents a time and a value.
3. Sort the 2D array AB based on the time values in ascending order.
4. Initialize a 2D array dp with dimensions (N+1) x 6001, where dp[i][j] represents the maximum value achievable at time j after considering the first i pairs.
5. Iterate over each pair from 1 to N.
6. For each pair i, iterate over all possible times from 0 to 6000.
7. Update dp[i][timeAfterEat] to be the maximum of its current value and the value at dp[i-1][timeAfterEat].
8. For each timeAfterEat, check if timeAfterEat - time is within the valid range [0, T).
9. If the condition in step 8 is met, update dp[i][timeAfterEat] to be the maximum of its current value and dp[i-1][timeAfterEat - time] + value.
10. Find the maximum value in the last row of the dp array, dp[N].
11. Output the maximum value found in step 10.
