1. Set recursion limit to 10^5
2. Define a class Node with properties val, color, and a list a
3. Initialize n as the integer input from the user
4. Create an empty list nodes
5. For i from 0 to n-1, append a new Node to nodes
6. For i from 0 to n-2, 
   1. Read u, v, w from user input
   2. Set node1 as nodes[u-1] and node2 as nodes[v-1]
   3. Set node1.val to u and node2.val to v
   4. Append [node2, w] to node1.a and [node1, w] to node2.a
7. Set root as nodes[0]
8. Set root.color to True
9. Initialize an empty set nodeSet
10. Define a function traverse(node, distance)
    1. If node is in nodeSet, return
    2. Add node to nodeSet
    3. For each pair in node.a,
       1. Set adjNode as pair[0] and dis as pair[1]
       2. If (distance + dis) mod 2 equals 0, set adjNode.color to root.color
       3. Else, set adjNode.color to not root.color
       4. Call traverse(adjNode, distance + dis)
11. Call traverse(root, 0)
12. For i from 0 to n-1,
    1. Set node as nodes[i]
    2. If node.color is True, print 1
    3. Else, print 0
