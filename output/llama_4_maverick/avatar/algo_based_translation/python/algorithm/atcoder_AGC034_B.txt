1. Define a function `gcd(a, b)` 
   1.1. Set `a` and `b` to `max(a, b)` and `min(a, b)` respectively
   1.2. While `a % b > 0` 
      1.2.1. Update `a` and `b` to `b` and `a % b` respectively
   1.3. Return `b`

2. Define a function `solve()`
   2.1. Read input string `s`
   2.2. Initialize an empty string `t`
   2.3. Initialize a counter `i` to 0
   2.4. While `i < length(s)`
      2.4.1. If `s[i]` equals 'A'
         2.4.1.1. Append 'A' to `t`
         2.4.1.2. Increment `i` by 1
      2.4.2. Else if `s[i]` equals 'B'
         2.4.2.1. If `i < length(s) - 1`
            2.4.2.1.1. If `s[i + 1]` equals 'C'
               2.4.2.1.1.1. Append 'D' to `t`
               2.4.2.1.1.2. Increment `i` by 2
            2.4.2.1.2. Else
               2.4.2.1.2.1. Append 'X' to `t`
               2.4.2.1.2.2. Increment `i` by 1
         2.4.2.2. Else
            2.4.2.2.1. Append 'X' to `t`
            2.4.2.2.2. Increment `i` by 1
      2.4.3. Else
         2.4.3.1. Append 'X' to `t`
         2.4.3.2. Increment `i` by 1
   2.5. Initialize `total` to 0
   2.6. Initialize `numA` to 0
   2.7. For `i` from 0 to `length(t) - 1`
      2.7.1. If `t[i]` equals 'X'
         2.7.1.1. Set `numA` to 0
      2.7.2. Else
         2.7.2.1. If `t[i]` equals 'A'
            2.7.2.1.1. Increment `numA` by 1
         2.7.2.2. Else
            2.7.2.2.1. Increment `total` by `numA`
   2.8. Print `total`

3. If the script is the main module
   3.1. Call `solve()`
