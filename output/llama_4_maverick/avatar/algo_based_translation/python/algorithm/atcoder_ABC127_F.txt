1. Initialize `q` as an integer input from the user.
2. Initialize `ans` as an array `[0, 0]`.
3. Initialize two empty heaps `p1` and `p2`.
4. Heapify `p1` and `p2`.
5. Initialize `sum_b`, `sum_p1`, and `sum_p2` to 0.
6. For `_` ranging from 0 to `q-1`:
   1. Read a query `ql` as a list of integers from the user.
   2. If `ql[0]` equals 2:
      1. If the size of `p1` equals the size of `p2`:
         1. Print the value of `-p2[0]` and the result of `sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + sum_b`.
      2. Else:
         1. Print the value of `p1[0]` and the result of `sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + sum_b`.
   3. Else:
      1. Increment `sum_b` by `ql[2]`.
      2. If `p1` is empty:
         1. Push `ql[1]` onto `p1`.
         2. Increment `sum_p1` by `ql[1]`.
      3. Else if `p1[0]` is less than or equal to `ql[1]`:
         1. Push `ql[1]` onto `p1`.
         2. Increment `sum_p1` by `ql[1]`.
      4. Else:
         1. Push `-ql[1]` onto `p2`.
         2. Increment `sum_p2` by `ql[1]`.
      5. If the size of `p1` is less than the size of `p2`:
         1. Pop an element `k` from `p2`.
         2. Push `-k` onto `p1`.
         3. Increment `sum_p2` by `k`.
         4. Decrement `sum_p1` by `k`.
      6. If the size of `p1` is greater than the size of `p2` by more than 1:
         1. Pop an element `k` from `p1`.
         2. Push `-k` onto `p2`.
         3. Decrement `sum_p1` by `k`.
         4. Increment `sum_p2` by `k`.
