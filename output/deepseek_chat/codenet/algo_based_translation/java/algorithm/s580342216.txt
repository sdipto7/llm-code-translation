**Algorithm Extraction:**

**Main Class:**
- Function: main(String[] args)
  - Creates new Solution object

**Solution Class:**
- Constructor: Solution()
  - Initialize Scanner with System.in
  - While scanner has next input:
    - Call run_case()

- Function: run_case()
  - Read next line from scanner
  - Split line by whitespace
  - Parse first token as integer N
  - Parse second token as integer K
  - Initialize len = 0
  - While N > 0:
    - N = N / K (integer division)
    - len = len + 1
  - Print len

- Function: strToIntArray(String str)
  - Split str by whitespace into String array
  - Create int array of same size
  - For each element in String array:
    - Parse to integer and store in int array
  - Return int array

**LCS Class:**
- Field: int[][] dp

- Function: lcs(String A, String B)
  - Initialize dp[sz_a+1][sz_b+1] where sz_a = A.length(), sz_b = B.length()
  - Set first row and first column of dp to 0
  - For i from 1 to sz_a:
    - For j from 1 to sz_b:
      - If A[i-1] == B[j-1]:
        - dp[i][j] = dp[i-1][j-1] + 1
      - Else:
        - dp[i][j] = max(dp[i-1][j], dp[i][j-1])
  - Return dp[sz_a][sz_b]

- Function: getLCS(String X, String Y)
  - Initialize index = dp[m][n] where m = X.length(), n = Y.length()
  - Initialize temp = index
  - Create char array lcs of size index+1
  - Set lcs[index] = '\0'
  - Initialize i = m, j = n
  - While i > 0 AND j > 0:
    - If X[i-1] == Y[j-1]:
      - lcs[index-1] = X[i-1]
      - i = i - 1
      - j = j - 1
      - index = index - 1
    - Else if dp[i-1][j] > dp[i][j-1]:
      - i = i - 1
    - Else:
      - j = j - 1
  - Return substring of lcs from index 0 to temp+2

**Required Libraries:**
- java.util.Scanner
- java.lang.*
- java.io.*
