## 题目描述

小A和小B在玩一个游戏。游戏规则如下：

1. 游戏开始时，小A和小B各自拥有一个初始分数，初始分数为正整数。
2. 游戏进行若干轮，每轮小A和小B可以选择进行对决或者不进行对决。
3. 如果选择进行对决，则小A和小B的分数会发生变化：
   - 如果小A的分数大于小B的分数，则小A的分数增加1，小B的分数减少1。
   - 如果小A的分数小于小B的分数，则小A的分数减少1，小B的分数增加1。
   - 如果小A的分数等于小B的分数，则两人的分数都不变。
4. 游戏的目标是使得小A的分数尽可能大，小B的分数尽可能小。

现在给定小A和小B的初始分数，以及游戏进行的轮数，请你计算游戏结束后小A和小B的分数。

## 输入格式

输入包含三个整数，分别表示小A的初始分数、小B的初始分数和游戏进行的轮数。

## 输出格式

输出两个整数，表示游戏结束后小A和小B的分数。

## 样例输入


5 3 2


## 样例输出


6 2


## 样例解释

第一轮，小A和小B选择进行对决，小A的分数大于小B的分数，因此小A的分数增加1，小B的分数减少1，分数变为6和2。

第二轮，小A和小B选择进行对决，小A的分数大于小B的分数，因此小A的分数增加1，小B的分数减少1，分数变为7和1。

但是游戏只进行2轮，所以最终分数为6和2。

## 数据范围

- 1 ≤ 小A的初始分数, 小B的初始分数 ≤ 10^9
- 1 ≤ 游戏进行的轮数 ≤ 10^9

## 题解

这个问题可以通过观察对决对分数的影响来解决。每轮对决的结果只取决于当前两人的分数大小关系，而与轮数无关。因此，我们可以通过计算对决对分数的净影响来简化问题。

具体来说，每轮对决会使得分数较高的一方增加1，分数较低的一方减少1。因此，每轮对决的净影响是使得两人的分数差距增加2。

假设初始分数分别为A和B，且A > B。那么每轮对决后，A会增加1，B会减少1，两者的差距会增加2。如果初始A < B，则每轮对决后，A会减少1，B会增加1，两者的差距也会增加2。如果初始A = B，则对决后两人的分数不变。

因此，我们可以通过以下步骤来计算最终分数：

1. 计算初始分数差D = |A - B|。
2. 计算对决轮数K与D的关系：
   - 如果K <= D / 2，则对决会使得差距增加2K。
   - 如果K > D / 2，则对决会使得差距增加到2 * (D // 2)，然后剩余的轮数会使得两人的分数交替增加和减少。
3. 根据上述关系计算最终的分数。

具体实现如下：


import java.util.Scanner;

public class s846046431 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long A = sc.nextLong();
        long B = sc.nextLong();
        long K = sc.nextLong();

        long diff = Math.abs(A - B);
        if (K <= diff / 2) {
            if (A > B) {
                A += K;
                B -= K;
            } else {
                A -= K;
                B += K;
            }
        } else {
            long half = diff / 2;
            if (A > B) {
                A += half;
                B -= half;
            } else {
                A -= half;
                B += half;
            }
            K -= half;
            if (K % 2 == 1) {
                if (A > B) {
                    A += 1;
                    B -= 1;
                } else {
                    A -= 1;
                    B += 1;
                }
            }
        }
        System.out.println(A + " " + B);
    }
}


### 代码解释

1. 首先读取输入的三个整数A、B和K。
2. 计算初始分数差diff = |A - B|。
3. 如果K <= diff / 2，则直接根据初始分数大小关系，将A和B的分数增加或减少K。
4. 如果K > diff / 2，则先将分数差增加到最大可能的值（即diff / 2），然后剩余的轮数K - diff / 2会根据K的奇偶性决定是否再进行一次对决。
5. 最后输出最终的分数A和B。

这个方法通过减少对决轮数的计算复杂度，使得程序能够高效地处理大范围的输入数据。
