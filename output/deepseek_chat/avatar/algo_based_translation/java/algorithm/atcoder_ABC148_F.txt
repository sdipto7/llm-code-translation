**Function Signatures:**
- `public static void main(String[] args) throws Exception`
- `static void dfs(int u, int[] d, List<Integer>[] edges)`

**Variables:**
- `Scanner sc`
- `int N`
- `int u`
- `int v`
- `List<Integer>[] edges`
- `int a`
- `int b`
- `int[] d`
- `int[] e`
- `int q`

**Data Types:**
- `Scanner` from java.util.Scanner
- `int`
- `List<Integer>[]`
- `ArrayList<Integer>`
- `int[]`

**Libraries/Dependencies:**
- java.util.ArrayList
- java.util.List
- java.util.Scanner

**Algorithm Logic:**

1. Read integer N from input
2. Read integer u from input and subtract 1
3. Read integer v from input and subtract 1
4. Create array `edges` of size N containing List<Integer>
5. For i from 0 to N-1:
   - Initialize edges[i] as new ArrayList<Integer>
6. For i from 0 to N-2:
   - Read integer a from input and subtract 1
   - Read integer b from input and subtract 1
   - Add b to edges[a]
   - Add a to edges[b]
7. Create integer array d of size N
8. For i from 0 to N-1:
   - Set d[i] = Integer.MAX_VALUE
9. Set d[u] = 0
10. Call dfs(u, d, edges)
11. Create integer array e of size N
12. For i from 0 to N-1:
    - Set e[i] = Integer.MAX_VALUE
13. Set e[v] = 0
14. Call dfs(v, e, edges)
15. Initialize q = -1
16. For i from 0 to N-1:
    - If d[i] < e[i]:
        - If e[i] > q:
            - Set q = e[i]
17. If q <= 0:
    - Print 0
18. Else:
    - Print q - 1

**DFS Function Logic:**
- For each Integer nu in edges[u]:
    - If d[nu] equals Integer.MAX_VALUE:
        - Set d[nu] = d[u] + 1
        - Call dfs(nu, d, edges)
