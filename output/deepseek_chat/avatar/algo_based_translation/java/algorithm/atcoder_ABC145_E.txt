Function signature: main(String[] args)
Return type: void

Variables:
- Scanner sc: input scanner
- int N: number of items
- int T: time limit
- int[][] AB: 2D array of size N×2 storing time and value pairs
- int[][] dp: 2D DP table of size (N+1)×6001

Libraries:
- java.util.Arrays
- java.util.Comparator
- java.util.Scanner

Algorithm:
1. Initialize Scanner with System.in
2. Read integer N
3. Read integer T
4. Create 2D array AB with dimensions N×2
5. For i from 0 to N-1:
   - Read AB[i][0] (time)
   - Read AB[i][1] (value)
6. Sort AB array by first element (time) in ascending order using Comparator.comparingInt
7. Initialize dp array with dimensions (N+1)×6001 (all zeros)
8. For i from 1 to N:
   - For timeAfterEat from 0 to 6000:
     - Set dp[i][timeAfterEat] = max(dp[i][timeAfterEat], dp[i-1][timeAfterEat])
     - Extract time = AB[i-1][0]
     - Extract value = AB[i-1][1]
     - If (timeAfterEat - time >= 0) AND (timeAfterEat - time < T):
       - Set dp[i][timeAfterEat] = max(dp[i][timeAfterEat], dp[i-1][timeAfterEat - time] + value)
9. Find maximum value in dp[N] array using Arrays.stream().max().getAsInt()
10. Print the maximum value
