1. Import fractions and math modules
2. Read two integers n and num from input
3. Read a set of integers num_set from input
4. Initialize empty set two_times_set
5. For each element i in num_set:
   - For j from 1 to 29:
     - Divide i by 2 (integer division)
     - If i modulo 2 ≠ 0:
       - Add j to two_times_set
       - Break inner loop
   - If size of two_times_set ≠ 1:
     - Print 0
     - Break outer loop
6. If outer loop completes without breaking:
   - Convert num_set to list num_list
   - Initialize lcm = first element of num_list
   - For i from 1 to len(num_list)-1:
     - Update lcm = (lcm * num_list[i]) // gcd(lcm, num_list[i])
   - Calculate result = (num - lcm//2) // lcm + 1
   - Print result

Function signatures:
- fractions.gcd(a: int, b: int) → int

Variable declarations:
- n: int
- num: int
- num_set: set[int]
- two_times_set: set[int]
- i: int (loop variable)
- j: int (loop variable)
- num_list: list[int]
- lcm: int
- result: int

Input operations:
- Read line: split into two integers n, num
- Read line: split into integers, convert to set

Output operations:
- Print integer 0 (if condition met)
- Print integer result (if condition not met)

Control structures:
- For loop: for i in num_set
- Nested for loop: for j in range(1, 30)
- If condition: if i % 2 != 0
- If condition: if len(two_times_set) != 1
- Else clause: when outer for loop completes normally
- For loop: for i in range(1, len(num_list))

Dependencies:
- fractions module
- math module (imported but unused)
