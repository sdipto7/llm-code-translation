**Algorithm:**

1. Import sys module
2. Set recursion limit to 10^5
3. Define Node class:
   - Attributes: val (integer), color (boolean), a (list of lists containing Node and integer pairs)
4. Read integer n from input
5. Initialize empty list nodes
6. For i from 0 to n-1:
   - Append new Node() to nodes
7. For i from 0 to n-2:
   - Read u, v, w from input
   - node1 = nodes[u-1]
   - node2 = nodes[v-1]
   - Set node1.val = u
   - Set node2.val = v
   - Append [node2, w] to node1.a
   - Append [node1, w] to node2.a
8. Set root = nodes[0]
9. Set root.color = True
10. Initialize empty set nodeSet
11. Define function traverse(node: Node, distance: integer) -> void:
    - If node in nodeSet: return
    - Else: add node to nodeSet
    - For each pair in node.a:
        - adjNode = pair[0]
        - dis = pair[1]
        - If (distance + dis) % 2 == 0:
            - Set adjNode.color = root.color
        - Else:
            - Set adjNode.color = not root.color
        - Call traverse(adjNode, distance + dis)
12. Call traverse(root, 0)
13. For i from 0 to n-1:
    - node = nodes[i]
    - If node.color == True: print 1
    - Else: print 0
