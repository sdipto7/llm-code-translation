```
# Function signature
def dfs(cur: int, a: int, b: int, c: int) -> int

# Variable declarations and data types
N: int
A: int
B: int
C: int
l: List[int]

# Input operations
N, A, B, C = map(int, input().split())
l = [int(input()) for i in range(N)]

# dfs function logic
if cur == N:
    if min(a, b, c) > 0:
        return abs(A - a) + abs(B - b) + abs(C - c) - 30
    else:
        return 10 ** 9

no_add = dfs(cur + 1, a, b, c)
add_a = dfs(cur + 1, a + l[cur], b, c) + 10
add_b = dfs(cur + 1, a, b + l[cur], c) + 10
add_c = dfs(cur + 1, a, b, c + l[cur]) + 10

return min(no_add, add_a, add_b, add_c)

# Output operation
print(dfs(0, 0, 0, 0))
```
