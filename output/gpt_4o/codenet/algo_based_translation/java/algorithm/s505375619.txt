Algorithm:

1. Import the `Scanner` class from the `java.util` package.

2. Define the `main` function with the signature: `public static void main(String[] args)`.

3. Declare a `Scanner` object `s` to read input from the standard input.

4. Read an integer `n` from input using `s.next()` and convert it to an integer using `Integer.parseInt`.

5. Declare three integer arrays `v`, `c`, and `dp`, each of size `n`.

6. Initialize all elements of the `dp` array to 0 using a loop:
   - Loop from `i = 0` to `i < n`:
     - Set `dp[i] = 0`.

7. Read `n` integers from input for the array `v`:
   - Loop from `i = 0` to `i < n`:
     - Read a string from input using `s.next()`.
     - Convert the string to an integer using `Integer.parseInt` and assign it to `v[i]`.

8. Read `n` integers from input for the array `c`:
   - Loop from `i = 0` to `i < n`:
     - Read a string from input using `s.next()`.
     - Convert the string to an integer using `Integer.parseInt` and assign it to `c[i]`.

9. Initialize the first element of `dp` array:
   - Set `dp[0] = 0`.

10. Compute the `dp` array based on the given logic:
    - Loop from `i = 1` to `i < n`:
      - Compute `tmp = dp[i - 1] + (v[i - 1] - c[i - 1])`.
      - Set `dp[i] = max(tmp, dp[i - 1])`.

11. Handle the last element of the `dp` array:
    - Compute `tmp = dp[n - 1] + (v[n - 1] - c[n - 1])`.
    - Set `dp[n - 1] = max(tmp, dp[n - 1])`.

12. Output the result:
    - Print the value of `dp[n - 1]` to the standard output.
