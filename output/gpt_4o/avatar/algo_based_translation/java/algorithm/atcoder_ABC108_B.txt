```
Algorithm:
1. Define function `revpos` with parameters `int[] p` and `int[] q`, returns `int[]`.
   - Declare `int[] vec` with size 2 initialized to {0, 0}.
   - For `i` from 0 to length of `vec` (exclusive):
     - Set `vec[i] = p[i] - q[i]`.
   - Declare `int tmp`.
   - Set `tmp = vec[0]`.
   - Set `vec[0] = vec[1]`.
   - Set `vec[1] = -tmp`.
   - Declare `int[] newpos` with size 2 initialized to {0, 0}.
   - For `i` from 0 to length of `newpos` (exclusive):
     - Set `newpos[i] = q[i] + vec[i]`.
   - Return `newpos`.

2. In the main function:
   - Import `java.util.Scanner`.
   - Declare `Scanner scan` initialized with `System.in`.
   - Declare `int[] input` with size 4 initialized to {0, 0, 0, 0}.
   - For `i` from 0 to length of `input` (exclusive):
     - Set `input[i] = scan.nextInt()`.
   - Close the scanner `scan`.
   - Declare `int[][] position` with size 4x2 initialized to {{0, 0}, {0, 0}, {0, 0}, {0, 0}}.
   - Set `position[0][0] = input[0]`.
   - Set `position[0][1] = input[1]`.
   - Set `position[1][0] = input[2]`.
   - Set `position[1][1] = input[3]`.
   - Set `position[2] = revpos(position[0], position[1])`.
   - Set `position[3] = revpos(position[1], position[2])`.
   - If `position[0]` equals `revpos(position[2], position[3])`:
     - Print "OK".
   - Declare `int[] output` with size 4 initialized to {0, 0, 0, 0}.
   - Set `output[0] = position[2][0]`.
   - Set `output[1] = position[2][1]`.
   - Set `output[2] = position[3][0]`.
   - Set `output[3] = position[3][1]`.
   - For each `int i` in `output`:
     - Print `i`.
```
