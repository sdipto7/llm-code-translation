```
Dependencies:
- java.util.Scanner
- java.util.Arrays
- java.util.Map
- java.util.HashMap
- java.util.Map.Entry

Function: main(String[] args) : void
- Declare Scanner sc, initialize with System.in
- Declare int n, assign sc.nextInt()
- Declare int m, assign n - 1
- Initialize int[] colors with size n, fill with -1
- Declare Point[] points, initialize with size n
- For i from 0 to n-1, do:
  - Assign new Point(i) to points[i]
- While m > 0, do:
  - Decrement m
  - Declare int me, assign sc.nextInt() - 1
  - Declare int you, assign sc.nextInt() - 1
  - Declare int length, assign sc.nextInt()
  - Call points[me].becomeFriend(points[you], length)
  - Call points[you].becomeFriend(points[me], length)
- Call dfs(points[0], 0)
- For each int c in colors, do:
  - Print c

Function: dfs(Point p, int length) : void
- Declare boolean alreadyKnown, check if colors[p.name] != -1
- If alreadyKnown is true, return
- If length % 2 == 0, do:
  - Assign 0 to colors[p.name]
- Else, do:
  - Assign 1 to colors[p.name]
- For each Entry<Point, Integer> entry in p.friends.entrySet(), do:
  - Declare Point friend, assign entry.getKey()
  - Declare int length2, assign entry.getValue()
  - Call dfs(friend, length + length2)

Class: Point
- int name
- Map<Point, Integer> friends
- Constructor Point(int name)
  - Assign name to this.name
  - Initialize this.friends with new HashMap<Point, Integer>()
- Method becomeFriend(Point p, int length) : void
  - Insert (p, length) into this.friends
```
