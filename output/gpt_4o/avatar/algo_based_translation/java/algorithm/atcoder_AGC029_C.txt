```
Function main()
    Declare m as atcoder_AGC029_C
    Call m.solve()
End Function

Class atcoder_AGC029_C
    Private Integer n
    Private Integer array a
    Private TreeMap<Integer, Integer> s

    Private Function set()
        Try
            Declare br as BufferedReader using InputStreamReader(System.in)
            Assign n = Integer.parseInt(br.readLine())
            Assign a = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray()
            Assign s = new TreeMap<>()
        Catch IOException e
            Call e.printStackTrace()
        End Try
    End Function

    Private Function solve()
        Call set()
        Declare Integer ng = 0
        Declare Integer ok = n
        While (ok - ng > 1)
            Declare Integer k = (ng + ok) / 2
            If Call isPossible(k) Then
                Assign ok = k
            Else
                Assign ng = k
            End If
        End While
        Print ok
    End Function

    Private Function isPossible(Integer k) Returns Boolean
        Call s.clear()
        Declare Integer current = 0
        For Each Integer ai in a
            If (ai <= current)
                If (k == 1) Then
                    Return False
                End If
                While (s is not empty AND s.lastKey() >= ai)
                    Call s.pollLastEntry()
                End While
                Declare Integer p = ai - 1
                While (True)
                    If (p < 0) Then
                        Return False
                    End If
                    Declare Integer sp = s.getOrDefault(p, 0) + 1
                    Call s.put(p, sp)
                    If (sp == k) Then
                        Call s.remove(p)
                        Decrement p
                    Else
                        Break
                    End If
                End While
            End If
            Assign current = ai
        End For
        Return True
    End Function
End Class
```
