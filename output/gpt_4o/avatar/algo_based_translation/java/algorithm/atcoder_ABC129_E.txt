```
Algorithm AtCoder_ABC129_E

1. Define a constant integer M = 1000000007 for modulo operations.
2. Read a string input and convert it into a character array `s`.
3. Determine the length `n` of the character array `s`.
4. Initialize a 2D integer array `dp` of size `[n + 1][2]` with all elements set to zero.
5. Set `dp[0][0]` to 1.
6. For each integer `i` from 0 to `n - 1`:
   a. If `s[i]` is '0':
      i. Set `dp[i + 1][0]` to `dp[i][0]`.
      ii. Set `dp[i + 1][1]` to `dp[i][1]`.
   b. If `s[i]` is not '0':
      i. Set `dp[i + 1][1]` to `(dp[i][0] + dp[i][1]) % M`.
   c. If `s[i]` is '0':
      i. Update `dp[i + 1][1]` to `(dp[i + 1][1] + (dp[i][1] * 2) % M) % M`.
   d. If `s[i]` is not '0':
      i. Update `dp[i + 1][0]` to `(dp[i + 1][0] + (dp[i][0] * 2) % M) % M`.
      ii. Update `dp[i + 1][1]` to `(dp[i + 1][1] + (dp[i][1] * 2) % M) % M`.
7. Output the result `(dp[n][0] + dp[n][1]) % M`.
```
