1. Import necessary Java libraries: BufferedReader, IOException, InputStreamReader, PrintWriter, Arrays.

2. Define `isSolution` function with parameters `columnsCount` (int) and `x` (String), returning a boolean:
   - Declare `allXs` as a boolean array of size `columnsCount` and set all values to true using `Arrays.fill`.
   - For `i` from 0 to 11 (inclusive), do:
     - If `x.charAt(i)` is not 'X', set `allXs[i % columnsCount]` to false.
   - For `i` from 0 to `columnsCount` - 1 (inclusive), do:
     - If `allXs[i]` is true, return true.
   - Return false.

3. Define the `main` method with `args` as a String array, throws IOException:
   - Initialize `BufferedReader br` with `InputStreamReader(System.in)`.
   - Initialize `PrintWriter pw` for output.
   - Read an integer `t` from input using `br.readLine()` and `Integer.parseInt`.
   - For `i` from 0 to `t` - 1 (inclusive), do:
     - Initialize `possibleSolutions` as 0 and `solutions` as a new `StringBuilder`.
     - Read a string `s` using `br.readLine()`.
     - If `isSolution(12, s)` returns true:
       - Append " 1x12" to `solutions`.
       - Increment `possibleSolutions`.
     - If `isSolution(6, s)` returns true:
       - Append " 2x6" to `solutions`.
       - Increment `possibleSolutions`.
     - If `isSolution(4, s)` returns true:
       - Append " 3x4" to `solutions`.
       - Increment `possibleSolutions`.
     - If `isSolution(3, s)` returns true:
       - Append " 4x3" to `solutions`.
       - Increment `possibleSolutions`.
     - If `isSolution(2, s)` returns true:
       - Append " 6x2" to `solutions`.
       - Increment `possibleSolutions`.
     - If `isSolution(1, s)` returns true:
       - Append " 12x1" to `solutions`.
       - Increment `possibleSolutions`.
     - Print `possibleSolutions` and `solutions` using `pw.print` and `pw.println`.
   - Flush and close the `PrintWriter` using `pw.flush()` and `pw.close()`.
