```
Dependencies:
- Import `sys` module.
- Set recursion limit with `sys.setrecursionlimit(10**5)`.

Data Structures:
- Define class `Node` with attributes:
  - `val` (int, initially None)
  - `color` (bool, initially None)
  - `a` (list of lists, initially empty)

Variables:
- `n` (int): Number of nodes, input from user.
- `nodes` (list of `Node`): List to store all nodes.
- `nodeSet` (set of `Node`): To track visited nodes.

Input Operations:
- Read integer `n` for number of nodes.
- Create `n` instances of `Node` and append to `nodes`.

Loop (i from 0 to n-2):
- Read integers `u`, `v`, `w` from input.
- Assign `u` to `val` of `nodes[u-1]`.
- Assign `v` to `val` of `nodes[v-1]`.
- Append `[nodes[v-1], w]` to `a` of `nodes[u-1]`.
- Append `[nodes[u-1], w]` to `a` of `nodes[v-1]`.

Initialization:
- Set `root` as `nodes[0]`.
- Set `root.color` to `True`.

Define function `traverse(node: Node, distance: int) -> None`:
- If `node` in `nodeSet`, return.
- Add `node` to `nodeSet`.
- For each `pair` in `node.a`:
  - Assign `pair[0]` to `adjNode`.
  - Assign `pair[1]` to `dis`.
  - If `(distance + dis) % 2 == 0`, set `adjNode.color` to `root.color`.
  - Otherwise, set `adjNode.color` to `not root.color`.
  - Call `traverse(adjNode, distance + dis)`.

Execution:
- Call `traverse(root, 0)`.
- Loop (i from 0 to n-1):
  - If `nodes[i].color` is `True`, print `1`.
  - Otherwise, print `0`.
```
